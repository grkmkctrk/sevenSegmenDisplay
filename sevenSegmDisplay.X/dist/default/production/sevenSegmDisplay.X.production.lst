

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Dec 13 10:38:48 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.31
    18                           ; Generated 13/10/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232                           
   233                           	psect	idataBANK0
   234  0734                     __pidataBANK0:
   235                           
   236                           ;initializer for _countTillNine
   237  0734  34C0               	retlw	192
   238  0735  34F9               	retlw	249
   239  0736  34A4               	retlw	164
   240  0737  34B0               	retlw	176
   241  0738  3499               	retlw	153
   242  0739  3492               	retlw	146
   243  073A  3482               	retlw	130
   244  073B  34F8               	retlw	248
   245  073C  3480               	retlw	128
   246  073D  3490               	retlw	144
   247                           
   248                           	psect	strings
   249  0003                     __pstrings:
   250  0003                     stringtab:
   251  0003                     __stringtab:
   252  0003                     stringcode:	
   253                           ;	String table - string pointers are 1 byte each
   254                           
   255  0003                     stringdir:
   256  0003  3000               	movlw	high stringdir
   257  0004  008A               	movwf	10
   258  0005  0804               	movf	4,w
   259  0006  0A84               	incf	4,f
   260  0007  0782               	addwf	2,f
   261  0008                     __stringbase:
   262  0008  3400               	retlw	0
   263  0009                     __end_of__stringtab:
   264  0009                     exp@coeff:
   265  0009  3400               	retlw	0
   266  000A  3400               	retlw	0
   267  000B  3480               	retlw	128
   268  000C  343F               	retlw	63
   269  000D  3418               	retlw	24
   270  000E  3472               	retlw	114
   271  000F  3431               	retlw	49
   272  0010  343F               	retlw	63
   273  0011  34F0               	retlw	240
   274  0012  34FD               	retlw	253
   275  0013  3475               	retlw	117
   276  0014  343E               	retlw	62
   277  0015  3447               	retlw	71
   278  0016  3458               	retlw	88
   279  0017  3463               	retlw	99
   280  0018  343D               	retlw	61
   281  0019  3458               	retlw	88
   282  001A  3495               	retlw	149
   283  001B  341D               	retlw	29
   284  001C  343C               	retlw	60
   285  001D  3482               	retlw	130
   286  001E  34C4               	retlw	196
   287  001F  34AE               	retlw	174
   288  0020  343A               	retlw	58
   289  0021  34A8               	retlw	168
   290  0022  3478               	retlw	120
   291  0023  3421               	retlw	33
   292  0024  3439               	retlw	57
   293  0025  34EF               	retlw	239
   294  0026  3493               	retlw	147
   295  0027  3480               	retlw	128
   296  0028  3437               	retlw	55
   297  0029  34A0               	retlw	160
   298  002A  3492               	retlw	146
   299  002B  34A7               	retlw	167
   300  002C  3435               	retlw	53
   301  002D  3446               	retlw	70
   302  002E  3456               	retlw	86
   303  002F  3415               	retlw	21
   304  0030  3434               	retlw	52
   305  0031                     __end_ofexp@coeff:
   306  0031                     log@coeff:
   307  0031  3400               	retlw	0
   308  0032  3400               	retlw	0
   309  0033  3400               	retlw	0
   310  0034  3400               	retlw	0
   311  0035  34C4               	retlw	196
   312  0036  34FF               	retlw	255
   313  0037  347F               	retlw	127
   314  0038  343F               	retlw	63
   315  0039  3480               	retlw	128
   316  003A  34EF               	retlw	239
   317  003B  34FF               	retlw	255
   318  003C  34BE               	retlw	190
   319  003D  3490               	retlw	144
   320  003E  34E1               	retlw	225
   321  003F  34A9               	retlw	169
   322  0040  343E               	retlw	62
   323  0041  34EC               	retlw	236
   324  0042  3482               	retlw	130
   325  0043  3476               	retlw	118
   326  0044  34BE               	retlw	190
   327  0045  3482               	retlw	130
   328  0046  34AD               	retlw	173
   329  0047  342B               	retlw	43
   330  0048  343E               	retlw	62
   331  0049  340E               	retlw	14
   332  004A  343C               	retlw	60
   333  004B  34C3               	retlw	195
   334  004C  34BD               	retlw	189
   335  004D  3487               	retlw	135
   336  004E  34D1               	retlw	209
   337  004F  3413               	retlw	19
   338  0050  343D               	retlw	61
   339  0051  3441               	retlw	65
   340  0052  3478               	retlw	120
   341  0053  34D3               	retlw	211
   342  0054  34BB               	retlw	187
   343  0055                     __end_oflog@coeff:
   344  0008                     _PORTD	set	8
   345  0007                     _PORTC	set	7
   346  0006                     _PORTB	set	6
   347  0005                     _PORTA	set	5
   348  0088                     _TRISD	set	136
   349  0087                     _TRISC	set	135
   350  0086                     _TRISB	set	134
   351  0085                     _TRISA	set	133
   352                           
   353                           	psect	cinit
   354  07EC                     start_initialization:	
   355                           ; #config settings
   356                           
   357  07EC                     __initialization:
   358                           
   359                           ; Initialize objects allocated to BANK0
   360  07EC  1383               	bcf	3,7	;select IRP bank0
   361  07ED  302A               	movlw	low (__pdataBANK0+10)
   362  07EE  00FD               	movwf	btemp+-1
   363  07EF  3007               	movlw	high __pidataBANK0
   364  07F0  00FE               	movwf	btemp
   365  07F1  3034               	movlw	low __pidataBANK0
   366  07F2  00FF               	movwf	btemp+1
   367  07F3  3020               	movlw	low __pdataBANK0
   368  07F4  0084               	movwf	4
   369  07F5  120A  118A  2751  120A  118A  	fcall	init_ram0
   370                           
   371                           ; Clear objects allocated to COMMON
   372  07FA  01F5               	clrf	__pbssCOMMON& (0+127)
   373  07FB  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   374  07FC                     end_of_initialization:	
   375                           ;End of C runtime variable initialization code
   376                           
   377  07FC                     __end_of__initialization:
   378  07FC  0183               	clrf	3
   379  07FD  120A  118A  2F3E   	ljmp	_main	;jump to C main() function
   380                           
   381                           	psect	bssCOMMON
   382  0075                     __pbssCOMMON:
   383  0075                     _errno:
   384  0075                     	ds	2
   385                           
   386                           	psect	dataBANK0
   387  0020                     __pdataBANK0:
   388  0020                     _countTillNine:
   389  0020                     	ds	10
   390                           
   391                           	psect	inittext
   392  074D                     init_fetch0:	
   393                           ;	Called with low address in FSR and high address in W
   394                           
   395  074D  087E               	movf	btemp,w
   396  074E  008A               	movwf	10
   397  074F  087F               	movf	btemp+1,w
   398  0750  0082               	movwf	2
   399  0751                     init_ram0:	
   400                           ;Called with:
   401                           ;	high address of idata address in btemp 
   402                           ;	low address of idata address in btemp+1 
   403                           ;	low address of data in FSR
   404                           ;	high address + 1 of data in btemp-1
   405                           
   406  0751  120A  118A  274D  120A  118A  	fcall	init_fetch0
   407  0756  0080               	movwf	0
   408  0757  0A84               	incf	4,f
   409  0758  0804               	movf	4,w
   410  0759  067D               	xorwf	btemp+-1,w
   411  075A  1903               	btfsc	3,2
   412  075B  3400               	retlw	0
   413  075C  0AFF               	incf	btemp+1,f
   414  075D  1903               	btfsc	3,2
   415  075E  0AFE               	incf	btemp,f
   416  075F  2F51               	goto	init_ram0
   417                           
   418                           	psect	cstackCOMMON
   419  0070                     __pcstackCOMMON:
   420  0070                     ?_countToNine:
   421  0070                     ??_countToNine:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_allOfThemOut:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ??_allOfThemOut:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 1 bytes @ 0x0
   432                           
   433                           
   434                           ; 1 bytes @ 0x0
   435  0070                     	ds	2
   436  0072                     allOfThemOut@port:
   437                           
   438                           ; 1 bytes @ 0x2
   439  0072                     	ds	1
   440  0073                     countToNine@port:
   441                           
   442                           ; 1 bytes @ 0x3
   443  0073                     	ds	1
   444  0074                     countToNine@count:
   445                           
   446                           ; 1 bytes @ 0x4
   447  0074                     	ds	1
   448  0075                     ??_main:
   449                           
   450                           	psect	maintext
   451  073E                     __pmaintext:	
   452                           ; 1 bytes @ 0x5
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 6 in file "newmain.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;  port            1    0        unsigned char 
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : B00/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   472 ;;      Params:         0       0       0       0       0
   473 ;;      Locals:         1       0       0       0       0
   474 ;;      Temps:          0       0       0       0       0
   475 ;;      Totals:         1       0       0       0       0
   476 ;;Total ram usage:        1 bytes
   477 ;; Hardware stack levels required when called:    1
   478 ;; This function calls:
   479 ;;		_allOfThemOut
   480 ;;		_countToNine
   481 ;; This function is called by:
   482 ;;		Startup code after reset
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _main
   488  073E                     _main:
   489  073E                     l904:	
   490                           ;incstack = 0
   491                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   492                           
   493  073E                     l906:
   494                           
   495                           ;newmain.c: 19:     allOfThemOut(port);
   496  073E  3042               	movlw	66
   497  073F  120A  118A  2760  120A  118A  	fcall	_allOfThemOut
   498  0744                     l908:
   499                           
   500                           ;newmain.c: 21:     countToNine(port);
   501  0744  3042               	movlw	66
   502  0745  120A  118A  2795  120A  118A  	fcall	_countToNine
   503  074A                     l73:
   504  074A  120A  118A  2800   	ljmp	start
   505  074D                     __end_of_main:
   506                           
   507                           	psect	text1
   508  0795                     __ptext1:	
   509 ;; *************** function _countToNine *****************
   510 ;; Defined at:
   511 ;;		line 30 in file "displayDriver.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  port            1    wreg     unsigned char 
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  port            1    3[COMMON] unsigned char 
   516 ;;  count           1    4[COMMON] unsigned char 
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   521 ;; Tracked objects:
   522 ;;		On entry : 0/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   526 ;;      Params:         0       0       0       0       0
   527 ;;      Locals:         2       0       0       0       0
   528 ;;      Temps:          3       0       0       0       0
   529 ;;      Totals:         5       0       0       0       0
   530 ;;Total ram usage:        5 bytes
   531 ;; Hardware stack levels used:    1
   532 ;; This function calls:
   533 ;;		Nothing
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _countToNine
   541  0795                     _countToNine:
   542                           
   543                           ;incstack = 0
   544                           ; Regs used in _countToNine: [wreg-fsr0h+status,2+status,0]
   545                           ;countToNine@port stored from wreg
   546  0795  00F3               	movwf	countToNine@port
   547  0796                     l878:
   548                           
   549                           ;displayDriver.c: 31:     char count = 0;
   550  0796  01F4               	clrf	countToNine@count
   551  0797                     l880:
   552                           
   553                           ;displayDriver.c: 33:         if (count > 9) count = 0;
   554  0797  300A               	movlw	10
   555  0798  0274               	subwf	countToNine@count,w
   556  0799  1C03               	skipc
   557  079A  2F9C               	goto	u71
   558  079B  2F9D               	goto	u70
   559  079C                     u71:
   560  079C  2FC3               	goto	l894
   561  079D                     u70:
   562  079D                     l882:
   563  079D  01F4               	clrf	countToNine@count
   564  079E  2FC3               	goto	l894
   565  079F                     l884:
   566                           
   567                           ;displayDriver.c: 36:                 PORTA = countTillNine[count];
   568  079F  0874               	movf	countToNine@count,w
   569  07A0  3E20               	addlw	(low (_countTillNine| 0))& (0+255)
   570  07A1  0084               	movwf	4
   571  07A2  1383               	bcf	3,7	;select IRP bank0
   572  07A3  0800               	movf	0,w
   573  07A4  1283               	bcf	3,5	;RP0=0, select bank0
   574  07A5  1303               	bcf	3,6	;RP1=0, select bank0
   575  07A6  0085               	movwf	5	;volatile
   576                           
   577                           ;displayDriver.c: 37:                 break;
   578  07A7  2FD9               	goto	l896
   579  07A8                     l886:
   580                           
   581                           ;displayDriver.c: 39:                 PORTB = countTillNine[count];
   582  07A8  0874               	movf	countToNine@count,w
   583  07A9  3E20               	addlw	(low (_countTillNine| 0))& (0+255)
   584  07AA  0084               	movwf	4
   585  07AB  1383               	bcf	3,7	;select IRP bank0
   586  07AC  0800               	movf	0,w
   587  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   588  07AE  1303               	bcf	3,6	;RP1=0, select bank0
   589  07AF  0086               	movwf	6	;volatile
   590                           
   591                           ;displayDriver.c: 40:                 break;
   592  07B0  2FD9               	goto	l896
   593  07B1                     l888:
   594                           
   595                           ;displayDriver.c: 42:                 PORTC = countTillNine[count];
   596  07B1  0874               	movf	countToNine@count,w
   597  07B2  3E20               	addlw	(low (_countTillNine| 0))& (0+255)
   598  07B3  0084               	movwf	4
   599  07B4  1383               	bcf	3,7	;select IRP bank0
   600  07B5  0800               	movf	0,w
   601  07B6  1283               	bcf	3,5	;RP0=0, select bank0
   602  07B7  1303               	bcf	3,6	;RP1=0, select bank0
   603  07B8  0087               	movwf	7	;volatile
   604                           
   605                           ;displayDriver.c: 43:                 break;
   606  07B9  2FD9               	goto	l896
   607  07BA                     l890:
   608                           
   609                           ;displayDriver.c: 45:                 PORTD = countTillNine[count];
   610  07BA  0874               	movf	countToNine@count,w
   611  07BB  3E20               	addlw	(low (_countTillNine| 0))& (0+255)
   612  07BC  0084               	movwf	4
   613  07BD  1383               	bcf	3,7	;select IRP bank0
   614  07BE  0800               	movf	0,w
   615  07BF  1283               	bcf	3,5	;RP0=0, select bank0
   616  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   617  07C1  0088               	movwf	8	;volatile
   618                           
   619                           ;displayDriver.c: 46:                 break;
   620  07C2  2FD9               	goto	l896
   621  07C3                     l894:
   622  07C3  0873               	movf	countToNine@port,w
   623  07C4  00F0               	movwf	??_countToNine
   624  07C5  01F1               	clrf	??_countToNine+1
   625                           
   626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   627                           ; Switch size 1, requested type "simple"
   628                           ; Number of cases is 1, Range of values is 0 to 0
   629                           ; switch strategies available:
   630                           ; Name         Instructions Cycles
   631                           ; simple_byte            4     3 (average)
   632                           ; direct_byte           11     8 (fixed)
   633                           ; jumptable            260     6 (fixed)
   634                           ;	Chosen strategy is simple_byte
   635  07C6  0871               	movf	??_countToNine+1,w
   636  07C7  3A00               	xorlw	0	; case 0
   637  07C8  1903               	skipnz
   638  07C9  2FCB               	goto	l950
   639  07CA  2FD9               	goto	l896
   640  07CB                     l950:
   641                           
   642                           ; Switch size 1, requested type "simple"
   643                           ; Number of cases is 4, Range of values is 65 to 68
   644                           ; switch strategies available:
   645                           ; Name         Instructions Cycles
   646                           ; simple_byte           13     7 (average)
   647                           ; direct_byte           23    11 (fixed)
   648                           ; jumptable            263     9 (fixed)
   649                           ;	Chosen strategy is simple_byte
   650  07CB  0870               	movf	??_countToNine,w
   651  07CC  3A41               	xorlw	65	; case 65
   652  07CD  1903               	skipnz
   653  07CE  2F9F               	goto	l884
   654  07CF  3A03               	xorlw	3	; case 66
   655  07D0  1903               	skipnz
   656  07D1  2FA8               	goto	l886
   657  07D2  3A01               	xorlw	1	; case 67
   658  07D3  1903               	skipnz
   659  07D4  2FB1               	goto	l888
   660  07D5  3A07               	xorlw	7	; case 68
   661  07D6  1903               	skipnz
   662  07D7  2FBA               	goto	l890
   663  07D8  2FD9               	goto	l896
   664  07D9                     l896:
   665                           
   666                           ;displayDriver.c: 48:         _delay((unsigned long)((500)*(4000000/4000.0)));
   667  07D9  3003               	movlw	3
   668  07DA  00F2               	movwf	??_countToNine+2
   669  07DB  308A               	movlw	138
   670  07DC  00F1               	movwf	??_countToNine+1
   671  07DD  3055               	movlw	85
   672  07DE  00F0               	movwf	??_countToNine
   673  07DF                     u87:
   674  07DF  0BF0               	decfsz	??_countToNine,f
   675  07E0  2FDF               	goto	u87
   676  07E1  0BF1               	decfsz	??_countToNine+1,f
   677  07E2  2FDF               	goto	u87
   678  07E3  0BF2               	decfsz	??_countToNine+2,f
   679  07E4  2FDF               	goto	u87
   680  07E5  2FE6               	nop2
   681  07E6                     l898:
   682                           
   683                           ;displayDriver.c: 49:         count ++;
   684  07E6  3001               	movlw	1
   685  07E7  00F0               	movwf	??_countToNine
   686  07E8  0870               	movf	??_countToNine,w
   687  07E9  07F4               	addwf	countToNine@count,f
   688  07EA  2F97               	goto	l880
   689  07EB  0008               	return
   690  07EC                     __end_of_countToNine:
   691                           
   692                           	psect	text2
   693  0760                     __ptext2:	
   694 ;; *************** function _allOfThemOut *****************
   695 ;; Defined at:
   696 ;;		line 52 in file "displayDriver.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;  port            1    wreg     unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  port            1    2[COMMON] unsigned char 
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   710 ;;      Params:         0       0       0       0       0
   711 ;;      Locals:         1       0       0       0       0
   712 ;;      Temps:          2       0       0       0       0
   713 ;;      Totals:         3       0       0       0       0
   714 ;;Total ram usage:        3 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _allOfThemOut
   725  0760                     _allOfThemOut:
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _allOfThemOut: [wreg-fsr0h+status,2+status,0]
   729                           ;allOfThemOut@port stored from wreg
   730  0760  00F2               	movwf	allOfThemOut@port
   731  0761                     l774:
   732                           
   733                           ;displayDriver.c: 53:     switch(port){
   734  0761  2F7E               	goto	l786
   735  0762                     l776:
   736                           
   737                           ;displayDriver.c: 55:             TRISA = 0x00;
   738  0762  1683               	bsf	3,5	;RP0=1, select bank1
   739  0763  1303               	bcf	3,6	;RP1=0, select bank1
   740  0764  0185               	clrf	5	;volatile
   741                           
   742                           ;displayDriver.c: 56:             PORTA = 0x00;
   743  0765  1283               	bcf	3,5	;RP0=0, select bank0
   744  0766  1303               	bcf	3,6	;RP1=0, select bank0
   745  0767  0185               	clrf	5	;volatile
   746                           
   747                           ;displayDriver.c: 57:         break;
   748  0768  2F94               	goto	l44
   749  0769                     l778:
   750                           
   751                           ;displayDriver.c: 59:             TRISB = 0x00;
   752  0769  1683               	bsf	3,5	;RP0=1, select bank1
   753  076A  1303               	bcf	3,6	;RP1=0, select bank1
   754  076B  0186               	clrf	6	;volatile
   755                           
   756                           ;displayDriver.c: 60:             PORTB = 0x00;
   757  076C  1283               	bcf	3,5	;RP0=0, select bank0
   758  076D  1303               	bcf	3,6	;RP1=0, select bank0
   759  076E  0186               	clrf	6	;volatile
   760                           
   761                           ;displayDriver.c: 61:             break;
   762  076F  2F94               	goto	l44
   763  0770                     l780:
   764                           
   765                           ;displayDriver.c: 63:             TRISC = 0x00;
   766  0770  1683               	bsf	3,5	;RP0=1, select bank1
   767  0771  1303               	bcf	3,6	;RP1=0, select bank1
   768  0772  0187               	clrf	7	;volatile
   769                           
   770                           ;displayDriver.c: 64:             PORTC = 0x00;
   771  0773  1283               	bcf	3,5	;RP0=0, select bank0
   772  0774  1303               	bcf	3,6	;RP1=0, select bank0
   773  0775  0187               	clrf	7	;volatile
   774                           
   775                           ;displayDriver.c: 65:             break;
   776  0776  2F94               	goto	l44
   777  0777                     l782:
   778                           
   779                           ;displayDriver.c: 67:             TRISD = 0x00;
   780  0777  1683               	bsf	3,5	;RP0=1, select bank1
   781  0778  1303               	bcf	3,6	;RP1=0, select bank1
   782  0779  0188               	clrf	8	;volatile
   783                           
   784                           ;displayDriver.c: 68:             PORTD = 0x00;
   785  077A  1283               	bcf	3,5	;RP0=0, select bank0
   786  077B  1303               	bcf	3,6	;RP1=0, select bank0
   787  077C  0188               	clrf	8	;volatile
   788                           
   789                           ;displayDriver.c: 69:             break;
   790  077D  2F94               	goto	l44
   791  077E                     l786:
   792  077E  0872               	movf	allOfThemOut@port,w
   793  077F  00F0               	movwf	??_allOfThemOut
   794  0780  01F1               	clrf	??_allOfThemOut+1
   795                           
   796                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   797                           ; Switch size 1, requested type "simple"
   798                           ; Number of cases is 1, Range of values is 0 to 0
   799                           ; switch strategies available:
   800                           ; Name         Instructions Cycles
   801                           ; simple_byte            4     3 (average)
   802                           ; direct_byte           11     8 (fixed)
   803                           ; jumptable            260     6 (fixed)
   804                           ;	Chosen strategy is simple_byte
   805  0781  0871               	movf	??_allOfThemOut+1,w
   806  0782  3A00               	xorlw	0	; case 0
   807  0783  1903               	skipnz
   808  0784  2F86               	goto	l952
   809  0785  2F94               	goto	l44
   810  0786                     l952:
   811                           
   812                           ; Switch size 1, requested type "simple"
   813                           ; Number of cases is 4, Range of values is 65 to 68
   814                           ; switch strategies available:
   815                           ; Name         Instructions Cycles
   816                           ; simple_byte           13     7 (average)
   817                           ; direct_byte           23    11 (fixed)
   818                           ; jumptable            263     9 (fixed)
   819                           ;	Chosen strategy is simple_byte
   820  0786  0870               	movf	??_allOfThemOut,w
   821  0787  3A41               	xorlw	65	; case 65
   822  0788  1903               	skipnz
   823  0789  2F62               	goto	l776
   824  078A  3A03               	xorlw	3	; case 66
   825  078B  1903               	skipnz
   826  078C  2F69               	goto	l778
   827  078D  3A01               	xorlw	1	; case 67
   828  078E  1903               	skipnz
   829  078F  2F70               	goto	l780
   830  0790  3A07               	xorlw	7	; case 68
   831  0791  1903               	skipnz
   832  0792  2F77               	goto	l782
   833  0793  2F94               	goto	l44
   834  0794                     l44:
   835  0794  0008               	return
   836  0795                     __end_of_allOfThemOut:
   837  007E                     btemp	set	126	;btemp
   838  007E                     wtemp0	set	126
   839                           
   840                           	psect	config
   841                           
   842                           ;Config register CONFIG @ 0x2007
   843                           ;	Oscillator Selection bits
   844                           ;	FOSC = XT, XT oscillator
   845                           ;	Watchdog Timer Enable bit
   846                           ;	WDTE = OFF, WDT disabled
   847                           ;	Power-up Timer Enable bit
   848                           ;	PWRTE = OFF, PWRT disabled
   849                           ;	Brown-out Reset Enable bit
   850                           ;	BOREN = ON, BOR enabled
   851                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   852                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   853                           ;	Data EEPROM Memory Code Protection bit
   854                           ;	CPD = OFF, Data EEPROM code protection off
   855                           ;	Flash Program Memory Write Enable bits
   856                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   857                           ;	In-Circuit Debugger Mode bit
   858                           ;	DEBUG = 0x1, unprogrammed default
   859                           ;	Flash Program Memory Code Protection bit
   860                           ;	CP = OFF, Code protection off
   861  2007                     	org	8199
   862  2007  3FF9               	dw	16377

Data Sizes:
    Strings     0
    Constant    76
    Data        10
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_countToNine

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     195
                                              5 COMMON     1     1      0
                       _allOfThemOut
                        _countToNine
 ---------------------------------------------------------------------------------
 (1) _countToNine                                          5     5      0     135
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _allOfThemOut                                         3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _allOfThemOut
   _countToNine

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       A       5       12.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      12      12        0.0%
ABS                  0      0      12       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Dec 13 10:38:48 2020

                      pc 0002                       l44 0794                       l73 074A  
                     u70 079D                       u71 079C                       u87 07DF  
                     fsr 0004                      l904 073E                      l906 073E  
                    l780 0770                      l908 0744                      l782 0777  
                    l774 0761                      l950 07CB                      l952 0786  
                    l776 0762                      l880 0797                      l778 0769  
                    l786 077E                      l890 07BA                      l882 079D  
                    l884 079F                      l886 07A8                      l894 07C3  
                    l878 0796                      l888 07B1                      l896 07D9  
                    l898 07E6                      fsr0 0004                      indf 0000  
        countToNine@port 0073             ?_countToNine 0070                     _main 073E  
                   btemp 007E                     start 0000         countToNine@count 0074  
                  ?_main 0070                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _errno 0075                    pclath 000A                    status 0003  
                  wtemp0 007E            _countTillNine 0020          __initialization 07EC  
           __end_of_main 074D                   ??_main 0075    __size_of_allOfThemOut 0035  
           _allOfThemOut 0760         __end_ofexp@coeff 0031         __end_oflog@coeff 0055  
__end_of__initialization 07FC     __size_of_countToNine 0057           __pcstackCOMMON 0070  
           __pidataBANK0 0734               __pmaintext 073E               __stringtab 0003  
                __ptext1 0795                  __ptext2 0760     end_of_initialization 07FC  
    start_initialization 07EC            ??_countToNine 0070               init_fetch0 074D  
            __pdataBANK0 0020              __pbssCOMMON 0075                ___latbits 0002  
    __end_of_countToNine 07EC                __pstrings 0003            ?_allOfThemOut 0070  
            __stringbase 0008         allOfThemOut@port 0072              _countToNine 0795  
         ??_allOfThemOut 0070       __end_of__stringtab 0009            __size_of_main 000F  
               exp@coeff 0009                 log@coeff 0031                 init_ram0 0751  
              stringcode 0003                 stringdir 0003                 stringtab 0003  
   __end_of_allOfThemOut 0795  
